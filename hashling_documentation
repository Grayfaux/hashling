Doc Title: Hashling
Ver: 0.0.1
Author: Grayfaux
Get: https://github.com/Grayfaux/hashling/blob/master/hashling.py
Last Updated: 10/25/2022, 23:59:40
Description: Hashling is a dynamic python hashing algorithm. Allows unique hashing profiles for strong hashes.



The goal of hashling is to create a dynamic hash structure that allows the user to create
unique hash profiles and use those profiles to create a deterministic and repeatable hash based on those profiles.
Hashling allows the implementor to pass in parameters either strait into the function call or as a dictionary.

Hashling takes data formatted to string and returns a fixed length hash based on the hash_char_len

Hash bits = hash_char_len * 8
Based on the utf-8 per character bit size of 8, a hash_char_len of 64 returns a 512bit hash

1: When no hash profile is provided


    -Parameters will need to be passed in individually
            if hash_profile is None:  

                input_data = input_data
                salt = salt
                hash_char_len = hash_char_len
                infolds = infolds
                character_mask = character_mask
                enforce_phrasing = enforce_phrasing
                enforce_max_char_repeat = enforce_max_char_repeat



2: Data type enforcement for profile dictionaries


    -Checks on input types
        

            elif hash_profile is not None:
                input_data = hash_profile["input_data"]
                if type(input_data) != str:
                    raise Exception("input_data must be passed in as an string")
                salt = hash_profile["salt"]
                if type(salt) != str:
                    raise Exception("salt must be passed in as an string")
                hash_char_len = hash_profile["hash_char_len"]
                if type(hash_char_len) != int:
                    raise Exception("hash_char_len must be passed in as an integer")
                infolds = hash_profile["infolds"]
                if type(infolds) != int:
                    raise Exception("infolds must be passed in as an integer")
                character_mask = hash_profile["character_mask"]
                if type(character_mask) != bool:
                    raise Exception("character_mask must be passed in as an bool")
                enforce_phrasing = hash_profile["enforce_phrasing"]
                if type(enforce_phrasing) != bool:
                    raise Exception("enforce_phrasing must be passed in as an bool")
                enforce_max_char_repeat = hash_profile["enforce_max_char_repeat"]
                if type(enforce_max_char_repeat) != bool:
                    raise Exception("enforce_max_char_repeat must be passed in as an bool")



3: Length minimums on inputs

    -To encourage a stronger hash initial input require 10 character minimum
            if len(input_data) < 10:  

    -Otherwise an Exception is raised
                raise Exception("input_data must have a minimum length of 10")  

    -A hash_char_len of 64 minimum to further hash strength
            if hash_char_len < 64:  

    -Else Exception an is raised
                raise Exception("hash_char_len must be 64 or greater")  


4: Infolds refer to the number of additional times the input is split and alternated in on it's self

        if infolds < 10:  


    Minimum of 10 infolds is enforced
                raise Exception("infolds must be 10 or greater")  


5: Inputs as a phrase


    -enforce_phrasing when True requires passwords contain 2 spaces minimum. This will be extended in future commits
        

            if enforce_phrasing:
                spaces = 0
                for i in input_data:
                    if i == " ":
                        spaces += 1
                if spaces < 2:
                    raise Exception("input must contain spaces between words 2 spaces minimum")



6: Salt needs to be 10 character or longer

        if len(salt) < 10:  


    Else and exception is raised
                raise Exception("salt must be at least 10 characters long")  


7: Repeating characters in inputs


    -When enforce_max_char_repeat is True any individual character can't repeat more the 3 times sequentially
        

            if enforce_max_char_repeat:
                repeat = 0
                last_char = ""
                for i in input_data:
                    if i == last_char:
                        repeat += 1
                        if repeat >= 3:
                            raise Exception(f"character '{i}' exceeds sequential repeating characters of 3 for input_data")
                    if i != last_char:
                        repeat = 0
                        last_char = i



8: Initial input splicing


    -Two version of the initial list one in reverse and the original are spliced together, then joined
        

            input_data2 = input_data[::-1]
            new_input = []
            for i in range(len(input_data)):
                new_input.append(input_data[i])
                new_input.append(input_data2[i])
            input_data = "".join(new_input)



9: Mutation changes with the size of the hash_char_len

        mutation = hash_char_len // 2  


    Salt is added to the beginning of the of spliced input data
            salted_string = f"{salt}{input_data}"  


10: Input is converted to Unicode character and multiplied to the power of the mutation value


    -Two versions of the Unicode conversions are combined then spliced before getting joined
        

            to_ord = [ord(i) for i in salted_string]
        
            ord_to_power = [str(i**mutation) for i in to_ord]
            ord_to_power2 = [i**mutation for i in to_ord]
            ord_to_power2.sort(reverse=True)
            ord_to_power2 = [str(i) for i in ord_to_power2]
        
            ord_to_power = "".join(ord_to_power)
            ord_to_power2 = "".join(ord_to_power2)
        
            org_length = len(ord_to_power)
            zip_add = [str(int(i) + int(ord_to_power2[ord_to_power.index(i)])) for i in ord_to_power]
            zip_add = "".join(zip_add)



11: Throwaway data


    -After the unicode is spliced the and the data is cut back down to original size
        

            while len(zip_add) != org_length:
                zip_add = zip_add[:-1]
        
            seg_zip = [zip_add[i:i + 20] for i in range(0, len(zip_add), 20)]
            if len(seg_zip[0]) != len(seg_zip[-1]):
                seg_zip.pop()
        
            seg_zip = "".join(seg_zip)



12: Infolding


    -The new string is split in half and reduced until they are half character length then zipped again
        

            def in_fold(data: str):
                seg_length = len(data)
                front_half = data[:seg_length//2]
                back_half = data[seg_length//2:]
        
                while len(front_half) != hash_char_len//2:
                    front_half = front_half[:-1]
        
                while len(back_half) != hash_char_len//2:
                    back_half = back_half[:-1]
        
                zipped_list = []
                for x in range(len(front_half)):
                    zipped_list.append(front_half[x])
                    zipped_list.append(back_half[x])
        
                return "".join(zipped_list)
        
            zipped_list = in_fold(seg_zip)



13: Infold iteration


    -Infolding can be repeated 10s of thousands of times with minimal overhead, up to 500,000 time in less than a second
        

            for i in range(infolds):
                zipped_list = in_fold(zipped_list)



14: Character masking


    -I character masking is set to true spacific integers are replaced with arbitrary character
        

            symbols = ["q", "w", "e", "r", "t", "y", "$", "#", "@", "!"]
            if character_mask:
                altered_list = []
                for i in zipped_list:
        
                    if i == zipped_list[-1]:
                        altered_list.append(symbols[int(i)])
                    elif i == zipped_list[0]:
                        altered_list.append(symbols[int(i)])
                    elif i == zipped_list[0]:
                        altered_list.append(symbols[int(i)])
                    elif i == zipped_list[length_of_zipped//2]:
                        altered_list.append(symbols[int(i)])
                    else:
                        altered_list.append(i)
        
                return "".join(altered_list)
            else:
                return zipped_list



15: Example of hash profile


    -Hash profiles can be passed as dict. Constant values like user ids can be passed as salt to make hash move varied
        

        profile = {
            "input_data": "password111",
            "salt": "salt%4321!",
            "hash_char_len": 64,
            "infolds": 1000,
            "character_mask": False,
            "enforce_phrasing": False,
            "enforce_max_char_repeat": True
        }




Output from profile example
hash chars:64
hash bits:512
hash: 1161810360341148631161643161616603161116111434411401611160836161
run time:0.005455732345581055

